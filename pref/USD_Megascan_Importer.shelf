<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="USD_Megascan_Importer" label="USD Megascan Importer">
    <memberTool name="LoadTool"/>
    <memberTool name="MS_USD_Convertor"/>
    <memberTool name="AssetManagerAndConvertor"/>
    <memberTool name="Help"/>
  </toolshelf>

  <tool name="AssetManagerAndConvertor" label="Open AssetManager + USD Convertor" icon="$HOUDINI_SCRIPT_PATH/USD_Megascan_Importer/bin/icons/asset.png">
    <script scriptType="python"><![CDATA[import hou

desktop = hou.ui.curDesktop()   ## Desktop Class
panel_float_tab = desktop.createFloatingPanel(hou.paneTabType.NetworkEditor)   # floatingPanel Class
panel_float_tab.setName("USD_IMPORTER")

panel_float_tab.panes()[0].splitVertically()    #Pane

panel_float_tab.panes()[0].showPaneTabsStow(False) 
panel_float_tab.panes()[1].showPaneTabsStow(False) 

pp1 = panel_float_tab.paneTabs()[0].setType(hou.paneTabType.PythonPanel)
pp1.showToolbar(False) 

pp2 = panel_float_tab.paneTabs()[1].setType(hou.paneTabType.PythonPanel)

pp1.setActiveInterface(hou.pypanel.interfaceByName("MS_USD_Converter"))
pp2.setActiveInterface(hou.pypanel.interfaceByName("layout_asset_gallery"))

lag = pp2.activeInterface()


]]></script>
  </tool>

  <tool name="MS_USD_Convertor" label="MS USD Convertor" icon="$HOUDINI_SCRIPT_PATH/USD_Megascan_Importer/bin/icons/USDLogo400x400.png">
    <script scriptType="python"><![CDATA[import os, sys
from pathlib import Path
scripts = os.getenv('HOUDINI_SCRIPT_PATH')
SRC_PATH = str(scripts + '/USD_Megascan_Importer')

if str(SRC_PATH) not in sys.path:
    sys.path.append(str(SRC_PATH))

from PySide2.QtCore import Qt
from PySide2.QtGui import QFont, QIcon
from PySide2.QtWidgets import (QComboBox, QFrame, QHBoxLayout, QLabel,
                               QLineEdit, QListWidget, QMainWindow,
                               QMessageBox, QPushButton, QRadioButton,
                               QStatusBar, QVBoxLayout, QWidget, QApplication)
import loadPanel
from EditListUI import ExportPathVarUI
from Help_UI import HelpUI
import master_conversion_USD 

class USD_UI(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.setWindowTitle("Megascan USD Asset Converter")
        
        self.setWindowIcon(QIcon(SRC_PATH + "\\bin\\icons\\main.png"))
        self.LightGreyFont = QFont("Courier", 8)
        self._UI_ImportSection()
        self._createUI()

    #--------- UI MAIN ---------#       
    def _createUI(self):
        self.setStatusBar(QStatusBar(self))
        # Step 1
        PathPrefixLabel = QLabel("Set a Default Path Prefix for Asset Export Path")
        PathPrefixLabel.setStyleSheet( "font-size : 10pt; color: lightgrey; font-weight:bold;")

        self.SetPathPrefixCombo = QComboBox()
        self.SetPathPrefixCombo.setFixedWidth(200)
        self.EditPathWindow = ExportPathVarUI(self)

        self.SetPathPrefixCombo.addItems(self.EditPathWindow._getList())
        
        EditPathSet = QPushButton("Edit List")
        EditPathSet.clicked.connect(self.EditList_was_clicked)

        PathPrefixLabel2 = QLabel("Default $HIP/usd/assets would be good if you need to move around your Project")
        PathPrefixLabel2.setWordWrap(True)
        PathPrefixLabel2.setFont(self.LightGreyFont)

        # Step 2
        HLine = QFrame()
        HLine.setFrameShape(QFrame.HLine)
        Frame1 = QFrame()
        Frame1.setFrameShape(QFrame.Box)

        self.convert = QPushButton("Convert into USD")
        self.convert.setStyleSheet("color: rgb(0, 255, 155);")
        self.help = QPushButton("Help")
        self.help.setStyleSheet("color: rgb(255, 80, 80);")
        self.help.clicked.connect(self.help_was_clicked)
        self.convert.clicked.connect(self.convert_was_clicked)

        ## Path Layout
        LayHor1 = QHBoxLayout()
        LayHor1.addStretch()
        LayHor1.addWidget(self.SetPathPrefixCombo)
        LayHor1.addStretch()
        LayHor1.addWidget(EditPathSet)
        LayHor1.addStretch()
        
    
        ## Final Layout
        FinalLayout = QHBoxLayout()
        FinalLayout.addWidget(self.help)
        FinalLayout.addWidget(self.convert)
        FinalLayout.setAlignment(self.help, Qt.AlignHCenter)
        FinalLayout.setAlignment(self.convert, Qt.AlignHCenter)

        ## Core Layout
        CoreLayout = QVBoxLayout()
        CoreLayout.addWidget(PathPrefixLabel)
        CoreLayout.addLayout(LayHor1)
        CoreLayout.addWidget(PathPrefixLabel2)
        CoreLayout.addWidget(HLine)
        CoreLayout.addSpacing(20)
        CoreLayout.addLayout(self.ImportLayout)
        CoreLayout.addSpacing(20)
        CoreLayout.addLayout(FinalLayout)
        CoreLayout.addStretch()

        Container = QWidget()
        Container.setLayout(CoreLayout)

        self.setCentralWidget(Container)
    
    #--------- UI Import Section ---------#   
    def _UI_ImportSection(self):

        label1 = QLabel("1. Import Megascan Asset Using Bridge and MSPlugin and select the *Asset Subnet*.")
        ImportHeading = QLabel("Import Settings")
        ImportHeading.setStyleSheet( "font-size : 10pt; color: lightgrey; font-weight:bold;")
        label2 = QLabel("2. Select One of the Import Method.")

        self.Single = QRadioButton ("Single Mesh")
        self.Variant = QRadioButton ("Multiple Variant Mesh LOD0 SOPS")
        self.Split = QRadioButton ("Sub-Split Variant Meshes inside LOD0")
        self.Single.toggled.connect(self._updateImportMethod)
        self.Variant.toggled.connect(self._updateImportMethod)
        self.Split.toggled.connect(self._updateImportMethod)
        self.Single.setStatusTip("Creates Single Asset for Single Mesh")
        self.Variant.setStatusTip("Creates Individual Asset for each of the collection Items of Single Meshes.")
        self.Split.setStatusTip("Creates Single Asset containing all variant of each collection items.")

        ## Method Radio Buttons
        ButtonLayout = QHBoxLayout()
        ButtonLayout.addStretch()
        ButtonLayout.addWidget(self.Single)
        ButtonLayout.addWidget(self.Variant)
        ButtonLayout.addWidget(self.Split)
        ButtonLayout.addStretch()
        
        
        self.ImportLayout = QVBoxLayout()
        self.ImportLayout.addWidget(ImportHeading)
        self.ImportLayout.setAlignment(ImportHeading, Qt.AlignHCenter)
        self.ImportLayout.addSpacing(10)
        self.ImportLayout.addWidget(label1)
        self.ImportLayout.addSpacing(10)
        self.ImportLayout.addWidget(label2)
        self.ImportLayout.addLayout(ButtonLayout)


    #--------- Choose Import Method ---------#
    def _updateImportMethod(self, data):
        ...

    #--------- Help ---------#
    def convert_was_clicked(self):
        if self.Single.isChecked():
            master_conversion_USD.mainSingle()
            print("single")
        elif self.Variant.isChecked():
            master_conversion_USD.SOPVariants()
            print("Variant")
        elif self.Split.isChecked():
            master_conversion_USD.subSOPVariants()
            print("Split")
    
    #--------- Help ---------#
    def help_was_clicked(self):
        print("help")
        self.H = HelpUI()
        self.H.show()
    
    def EditList_was_clicked(self):
        self.EditPathWindow.show()


A = USD_UI()
A.show()
]]></script>
  </tool>

  <tool name="Help" label="Help" icon="$HOUDINI_SCRIPT_PATH/USD_Megascan_Importer/bin/icons/help.png">
    <script scriptType="python"><![CDATA[import hou
from PySide2.QtWidgets import QApplication, QDialog, QLabel, QVBoxLayout, QPushButton
from PySide2.QtGui import QIcon

import os, sys, webbrowser
scripts = os.getenv('HOUDINI_SCRIPT_PATH')
SRC_PATH = str(scripts + '/USD_Megascan_Importer')

class HelpUI(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Help/Support")
        layout = QVBoxLayout()

        self.setWindowTitle("Help - Megascan USD Asset Converter")
        self.setWindowIcon(QIcon(SRC_PATH + "\\bin\\icons\\help.png"))
        
        label1 = QLabel("Kindly support the creator by giving Star â­ to the repository")
        self.docBtn = QPushButton('Open Documentation')
        self.support = QPushButton('Give Star â­')
        contact = QLabel('AgastyaPatel on LinkedIn/Github\n Email: contact2agastya@gmail.com')
        
        self.docBtn.clicked.connect(self.open_doc)
        self.support.clicked.connect(self.support_exec)
        
        layout.addWidget(label1)
        layout.addWidget(self.docBtn)
        layout.addWidget(self.support)
        layout.addSpacing(20)
        layout.addWidget(contact)
        self.setLayout(layout)
        
    def open_doc(self):
        webbrowser.open('https://agastyapatel.github.io/USD_Megascan_Importer/')

    def support_exec(self):
        webbrowser.open('https://github.com/AgastyaPatel/USD_Megascan_Importer')
        

dialog = HelpUI()
dialog.show()
]]></script>
  </tool>

  <tool name="LoadTool" label="Load Tool" icon="$HOUDINI_SCRIPT_PATH/USD_Megascan_Importer/bin/icons/load.png">
    <script scriptType="python"><![CDATA[import hou
import os, sys
from pathlib import Path
scripts = os.getenv('HOUDINI_SCRIPT_PATH')
SRC_PATH = str(scripts + '/USD_Megascan_Importer')

panel_file_path = SRC_PATH + "/pref/MS_USD_Converter.pypanel"
hou.pypanel.installFile(panel_file_path)]]></script>
  </tool>
</shelfDocument>
